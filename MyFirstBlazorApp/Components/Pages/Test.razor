@page "/test"
@rendermode InteractiveServer

<h3>Test</h3>

<h1>Number: @num</h1>

<button class="bigbluebutton" @onclick="IncrementNum">Increment</button>
<button class="biggreenbutton" @onclick="IncrementNum">Increment but Green</button>
<button class="bigredbutton" @onclick="ResetNum">Reset</button>

<div>
    <p>Enter <input type="number" @bind="textMaxLength" @oninput="SetTextMaxLength" min="1" /> characters into the following form (Remaining: @RemainingTextCharacters()):</p>
    <input type="text" @oninput="HandleInput" maxlength="@textMaxLength" />
    <br />
    <div class="progress-container">
        <div class="progress-bar" style="width: @UsedTextLengthPercent()%;"></div>
    </div>
    <p>@text</p>
</div>

@code {
    private int num = 0;
    private string text = "";
    private int textMaxLength = 10;

    private void IncrementNum()
    {
        this.num++;
    }

    private void ResetNum()
    {
        this.num = 0;
    }

    private void HandleInput(ChangeEventArgs e)
    {
        string newText = e.Value?.ToString() ?? string.Empty;
        if (newText.Length <= textMaxLength)
        {
            text = newText;
        }
    }

    private int RemainingTextCharacters()
    {
        return textMaxLength - (text?.Length ?? 0);
    }

    private int UsedTextLengthPercent()
    {
        if (textMaxLength <= 0)
        {
            return 0; // Avoid division by zero or negative values
        }

        double usedLength = text?.Length ?? 0;
        double percent = (usedLength / textMaxLength) * 100; // Calculate percentage
        percent = Math.Min(percent, 100); // Ensure percentage does not exceed 100%
        return (int)Math.Round(percent, 0); // Round to the nearest integer
    }

    private void SetTextMaxLength(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newLength) && newLength > 0)
        {
            textMaxLength = newLength;
        }
    }
}
